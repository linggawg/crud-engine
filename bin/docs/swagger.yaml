basePath: /engine/
definitions:
  models.ReqLogin:
    properties:
      duration:
        type: integer
      password:
        type: string
      username:
        type: string
    required:
    - duration
    - password
    - username
    type: object
  models.ReqUser:
    properties:
      password:
        type: string
      role_id:
        type: string
      userid:
        type: string
      username:
        type: string
    required:
    - password
    - role_id
    - username
    type: object
  models.ServicesRequest:
    properties:
      opts:
        $ref: '#/definitions/token.Claim'
      service_url:
        type: string
    required:
    - service_url
    type: object
  models.UsersServicesRequest:
    properties:
      db_id:
        type: string
      opts:
        $ref: '#/definitions/token.Claim'
      service_url:
        type: string
      user_id:
        type: string
    required:
    - service_url
    - user_id
    type: object
  token.Claim:
    properties:
      authorization:
        type: string
      roleName:
        type: string
      userId:
        type: string
    type: object
  utils.BaseWrapperModel:
    properties:
      code:
        type: integer
      data: {}
      message:
        type: string
      meta: {}
      success:
        type: boolean
    type: object
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  description: This is a sample server server.
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: Echo Swagger Engine Services
  version: "1.0"
paths:
  /:
    get:
      consumes:
      - '*/*'
      description: get the status of server.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
      summary: Show the status of server.
      tags:
      - HealthCheck
  /v1/{table}:
    get:
      consumes:
      - application/json
      description: Find all data by statement parameter
      parameters:
      - description: Table Name
        in: path
        name: table
        required: true
        type: string
      - description: key id of queries
        in: query
        name: key
        type: string
      - description: ' DISTINCT statement is used to return only distinct (different)
          values. '
        in: query
        name: isDistinct
        type: boolean
      - description: 'column name (ex : username, email)'
        in: query
        name: columns
        type: string
      - description: where condition query sql
        in: query
        name: filter
        type: string
      - description: limit per page
        in: query
        name: pageSize
        type: integer
      - description: 'page number list data '
        in: query
        name: pageNo
        type: integer
      - description: 'sorting data by column name (ex : name ASC / name DESC)'
        in: query
        name: sortBy
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.BaseWrapperModel'
      security:
      - Authorization: []
      summary: Find all Data
      tags:
      - Engine
    post:
      consumes:
      - application/json
      description: Insert data by column name in format JSON
      parameters:
      - description: Table Name
        in: path
        name: table
        required: true
        type: string
      - description: JSON request body based on column name
        in: body
        name: insertRequest
        required: true
        schema:
          additionalProperties: true
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.BaseWrapperModel'
      security:
      - Authorization: []
      summary: Insert Data
      tags:
      - Engine
  /v1/{table}/{value}:
    delete:
      consumes:
      - application/json
      description: Delete data by field_id
      parameters:
      - description: Table Name
        in: path
        name: table
        required: true
        type: string
      - description: Value Of id
        in: path
        name: value
        required: true
        type: string
      - description: 'Delete based on field_id '
        in: query
        name: field_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.BaseWrapperModel'
      security:
      - Authorization: []
      summary: Delete Data
      tags:
      - Engine
    patch:
      consumes:
      - application/json
      description: Update data by field_id and data by column name in format JSON,
        Can accept changes to only one field
      parameters:
      - description: Table Name
        in: path
        name: table
        required: true
        type: string
      - description: Value of id
        in: path
        name: value
        required: true
        type: string
      - description: 'Update based on field_id '
        in: query
        name: field_id
        required: true
        type: string
      - description: JSON request body based on column name
        in: body
        name: updateRequest
        required: true
        schema:
          additionalProperties: true
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.BaseWrapperModel'
      security:
      - Authorization: []
      summary: Patch Update Data
      tags:
      - Engine
    put:
      consumes:
      - application/json
      description: Update data by field_id and data by column name in format JSON,
        Requires sending complete data from the table, so that when there is data
        that is not sent it will be changed to the default value
      parameters:
      - description: Table Name
        in: path
        name: table
        required: true
        type: string
      - description: Value of id
        in: path
        name: value
        required: true
        type: string
      - description: 'Update based on field_id '
        in: query
        name: field_id
        required: true
        type: string
      - description: JSON request body based on column name
        in: body
        name: updateRequest
        required: true
        schema:
          additionalProperties: true
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.BaseWrapperModel'
      security:
      - Authorization: []
      summary: Put Update Data
      tags:
      - Engine
  /v1/login:
    post:
      consumes:
      - application/json
      description: Login api
      parameters:
      - description: JSON request body based on column name
        in: body
        name: ReqLogin
        required: true
        schema:
          $ref: '#/definitions/models.ReqLogin'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.BaseWrapperModel'
      summary: Login
      tags:
      - Auth
  /v1/register:
    post:
      consumes:
      - application/json
      description: Register new user for login
      parameters:
      - description: JSON request body based on column name
        in: body
        name: ReqUser
        required: true
        schema:
          $ref: '#/definitions/models.ReqUser'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.BaseWrapperModel'
      summary: Register
      tags:
      - Auth
  /v1/services/default:
    delete:
      consumes:
      - application/json
      description: Delete all services by services url
      parameters:
      - description: JSON request body based on column name, required service_url
        in: body
        name: UsersServicesRequest
        required: true
        schema:
          $ref: '#/definitions/models.ServicesRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.BaseWrapperModel'
      security:
      - Authorization: []
      summary: Delete Default services
      tags:
      - Services
  /v1/users-services/default:
    delete:
      consumes:
      - application/json
      description: Delete all users-services by user_id and services_url
      parameters:
      - description: JSON request body based on column name, required service_url,
          user_id
        in: body
        name: UsersServicesRequest
        required: true
        schema:
          $ref: '#/definitions/models.UsersServicesRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.BaseWrapperModel'
      security:
      - Authorization: []
      summary: Delete Default users-services
      tags:
      - Services
    post:
      consumes:
      - application/json
      description: Generate Default services GET, POST, PUT, PATCH, DELETE and create
        users services
      parameters:
      - description: JSON request body based on column name, required service_url,
          user_id, db_id
        in: body
        name: UsersServicesRequest
        required: true
        schema:
          $ref: '#/definitions/models.UsersServicesRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.BaseWrapperModel'
      security:
      - Authorization: []
      summary: Generate Default services and users-services
      tags:
      - Services
securityDefinitions:
  Authorization:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
