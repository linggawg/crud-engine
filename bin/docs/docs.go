// Package docs GENERATED BY SWAG; DO NOT EDIT
// This file was generated by swaggo/swag
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "termsOfService": "http://swagger.io/terms/",
        "contact": {
            "name": "API Support",
            "url": "http://www.swagger.io/support",
            "email": "support@swagger.io"
        },
        "license": {
            "name": "Apache 2.0",
            "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/": {
            "get": {
                "description": "get the status of server.",
                "consumes": [
                    "*/*"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "HealthCheck"
                ],
                "summary": "Show the status of server.",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/v1/login": {
            "post": {
                "description": "Login api",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Auth"
                ],
                "summary": "Login",
                "parameters": [
                    {
                        "description": "JSON request body based on column name",
                        "name": "ReqLogin",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.ReqLogin"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/utils.BaseWrapperModel"
                        }
                    }
                }
            }
        },
        "/v1/register": {
            "post": {
                "description": "Register new user for login",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Auth"
                ],
                "summary": "Register",
                "parameters": [
                    {
                        "description": "JSON request body based on column name",
                        "name": "ReqUser",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.ReqUser"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/utils.BaseWrapperModel"
                        }
                    }
                }
            }
        },
        "/v1/services/default": {
            "delete": {
                "security": [
                    {
                        "Authorization": []
                    }
                ],
                "description": "Delete all services by services url",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Services"
                ],
                "summary": "Delete Default services",
                "parameters": [
                    {
                        "description": "JSON request body based on column name, required service_url",
                        "name": "UsersServicesRequest",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.ServicesRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/utils.BaseWrapperModel"
                        }
                    }
                }
            }
        },
        "/v1/users-services/default": {
            "post": {
                "security": [
                    {
                        "Authorization": []
                    }
                ],
                "description": "Generate Default services GET, POST, PUT, PATCH, DELETE and create users services",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Services"
                ],
                "summary": "Generate Default services and users-services",
                "parameters": [
                    {
                        "description": "JSON request body based on column name, required service_url, user_id, db_id",
                        "name": "UsersServicesRequest",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.UsersServicesRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/utils.BaseWrapperModel"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "Authorization": []
                    }
                ],
                "description": "Delete all users-services by user_id and services_url",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Services"
                ],
                "summary": "Delete Default users-services",
                "parameters": [
                    {
                        "description": "JSON request body based on column name, required service_url, user_id",
                        "name": "UsersServicesRequest",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.UsersServicesRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/utils.BaseWrapperModel"
                        }
                    }
                }
            }
        },
        "/v1/{table}": {
            "get": {
                "security": [
                    {
                        "Authorization": []
                    }
                ],
                "description": "Find all data by statement parameter",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Engine"
                ],
                "summary": "Find all Data",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Table Name",
                        "name": "table",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "key id of queries",
                        "name": "key",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "description": " DISTINCT statement is used to return only distinct (different) values. ",
                        "name": "isDistinct",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "column name (ex : username, email)",
                        "name": "columns",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "where condition query sql",
                        "name": "filter",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "limit per page",
                        "name": "pageSize",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "page number list data ",
                        "name": "pageNo",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "sorting data by column name (ex : name ASC / name DESC)",
                        "name": "sortBy",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/utils.BaseWrapperModel"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "Authorization": []
                    }
                ],
                "description": "Insert data by column name in format JSON",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Engine"
                ],
                "summary": "Insert Data",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Table Name",
                        "name": "table",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "JSON request body based on column name",
                        "name": "insertRequest",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/utils.BaseWrapperModel"
                        }
                    }
                }
            }
        },
        "/v1/{table}/{value}": {
            "put": {
                "security": [
                    {
                        "Authorization": []
                    }
                ],
                "description": "Update data by field_id and data by column name in format JSON, Requires sending complete data from the table, so that when there is data that is not sent it will be changed to the default value",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Engine"
                ],
                "summary": "Put Update Data",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Table Name",
                        "name": "table",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Value of id",
                        "name": "value",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Update based on field_id ",
                        "name": "field_id",
                        "in": "query",
                        "required": true
                    },
                    {
                        "description": "JSON request body based on column name",
                        "name": "updateRequest",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/utils.BaseWrapperModel"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "Authorization": []
                    }
                ],
                "description": "Delete data by field_id",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Engine"
                ],
                "summary": "Delete Data",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Table Name",
                        "name": "table",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Value Of id",
                        "name": "value",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Delete based on field_id ",
                        "name": "field_id",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/utils.BaseWrapperModel"
                        }
                    }
                }
            },
            "patch": {
                "security": [
                    {
                        "Authorization": []
                    }
                ],
                "description": "Update data by field_id and data by column name in format JSON, Can accept changes to only one field",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Engine"
                ],
                "summary": "Patch Update Data",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Table Name",
                        "name": "table",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Value of id",
                        "name": "value",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Update based on field_id ",
                        "name": "field_id",
                        "in": "query",
                        "required": true
                    },
                    {
                        "description": "JSON request body based on column name",
                        "name": "updateRequest",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/utils.BaseWrapperModel"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "models.ReqLogin": {
            "type": "object",
            "required": [
                "duration",
                "password",
                "username"
            ],
            "properties": {
                "duration": {
                    "type": "integer"
                },
                "password": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "models.ReqUser": {
            "type": "object",
            "required": [
                "password",
                "role_id",
                "username"
            ],
            "properties": {
                "password": {
                    "type": "string"
                },
                "role_id": {
                    "type": "string"
                },
                "userid": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "models.ServicesRequest": {
            "type": "object",
            "required": [
                "service_url"
            ],
            "properties": {
                "opts": {
                    "$ref": "#/definitions/token.Claim"
                },
                "service_url": {
                    "type": "string"
                }
            }
        },
        "models.UsersServicesRequest": {
            "type": "object",
            "required": [
                "service_url",
                "user_id"
            ],
            "properties": {
                "db_id": {
                    "type": "string"
                },
                "opts": {
                    "$ref": "#/definitions/token.Claim"
                },
                "service_url": {
                    "type": "string"
                },
                "user_id": {
                    "type": "string"
                }
            }
        },
        "token.Claim": {
            "type": "object",
            "properties": {
                "authorization": {
                    "type": "string"
                },
                "roleName": {
                    "type": "string"
                },
                "userId": {
                    "type": "string"
                }
            }
        },
        "utils.BaseWrapperModel": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer"
                },
                "data": {},
                "message": {
                    "type": "string"
                },
                "meta": {},
                "success": {
                    "type": "boolean"
                }
            }
        }
    },
    "securityDefinitions": {
        "Authorization": {
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "",
	BasePath:         "/engine/",
	Schemes:          []string{},
	Title:            "Echo Swagger Engine Services",
	Description:      "This is a sample server server.",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
