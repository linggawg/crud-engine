// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"
	models "engine/bin/modules/users/models/domain"

	mock "github.com/stretchr/testify/mock"

	utils "engine/bin/pkg/utils"
)

// CommandUsecase is an autogenerated mock type for the CommandUsecase type
type CommandUsecase struct {
	mock.Mock
}

// Login provides a mock function with given fields: ctx, params
func (_m *CommandUsecase) Login(ctx context.Context, params models.ReqLogin) utils.Result {
	ret := _m.Called(ctx, params)

	var r0 utils.Result
	if rf, ok := ret.Get(0).(func(context.Context, models.ReqLogin) utils.Result); ok {
		r0 = rf(ctx, params)
	} else {
		r0 = ret.Get(0).(utils.Result)
	}

	return r0
}

// RegisterUser provides a mock function with given fields: ctx, params
func (_m *CommandUsecase) RegisterUser(ctx context.Context, params models.ReqUser) utils.Result {
	ret := _m.Called(ctx, params)

	var r0 utils.Result
	if rf, ok := ret.Get(0).(func(context.Context, models.ReqUser) utils.Result); ok {
		r0 = rf(ctx, params)
	} else {
		r0 = ret.Get(0).(utils.Result)
	}

	return r0
}

type mockConstructorTestingTNewCommandUsecase interface {
	mock.TestingT
	Cleanup(func())
}

// NewCommandUsecase creates a new instance of CommandUsecase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewCommandUsecase(t mockConstructorTestingTNewCommandUsecase) *CommandUsecase {
	mock := &CommandUsecase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
