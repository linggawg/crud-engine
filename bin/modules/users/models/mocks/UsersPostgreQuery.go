// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"
	models "engine/bin/modules/users/models/domain"

	mock "github.com/stretchr/testify/mock"
)

// UsersPostgreQuery is an autogenerated mock type for the UsersPostgre type
type UsersPostgreQuery struct {
	mock.Mock
}

// FindOneByID provides a mock function with given fields: ctx, id
func (_m *UsersPostgreQuery) FindOneByID(ctx context.Context, id string) (*models.Users, error) {
	ret := _m.Called(ctx, id)

	var r0 *models.Users
	if rf, ok := ret.Get(0).(func(context.Context, string) *models.Users); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Users)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindOneByUsername provides a mock function with given fields: ctx, email
func (_m *UsersPostgreQuery) FindOneByUsername(ctx context.Context, email string) (*models.Users, error) {
	ret := _m.Called(ctx, email)

	var r0 *models.Users
	if rf, ok := ret.Get(0).(func(context.Context, string) *models.Users); ok {
		r0 = rf(ctx, email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Users)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewUsersPostgreQuery interface {
	mock.TestingT
	Cleanup(func())
}

// NewUsersPostgreQuery creates a new instance of UsersPostgreQuery. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewUsersPostgreQuery(t mockConstructorTestingTNewUsersPostgreQuery) *UsersPostgreQuery {
	mock := &UsersPostgreQuery{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
