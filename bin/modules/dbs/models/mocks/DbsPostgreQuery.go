// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"
	models "engine/bin/modules/dbs/models/domain"

	mock "github.com/stretchr/testify/mock"
)

// DbsPostgreQuery is an autogenerated mock type for the DbsPostgre type
type DbsPostgreQuery struct {
	mock.Mock
}

// FindOneByID provides a mock function with given fields: ctx, id
func (_m *DbsPostgreQuery) FindOneByID(ctx context.Context, id string) (*models.Dbs, error) {
	ret := _m.Called(ctx, id)

	var r0 *models.Dbs
	if rf, ok := ret.Get(0).(func(context.Context, string) *models.Dbs); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Dbs)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewDbsPostgreQuery interface {
	mock.TestingT
	Cleanup(func())
}

// NewDbsPostgreQuery creates a new instance of DbsPostgreQuery. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewDbsPostgreQuery(t mockConstructorTestingTNewDbsPostgreQuery) *DbsPostgreQuery {
	mock := &DbsPostgreQuery{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
