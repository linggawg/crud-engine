// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	utils "engine/bin/pkg/utils"
)

// DbsQueryUsecase is an autogenerated mock type for the QueryUsecase type
type DbsQueryUsecase struct {
	mock.Mock
}

// GetDbsConnection provides a mock function with given fields: ctx, userId, method, serviceUrl, key
func (_m *DbsQueryUsecase) GetDbsConnection(ctx context.Context, userId string, method string, serviceUrl string, key string) utils.Result {
	ret := _m.Called(ctx, userId, method, serviceUrl, key)

	var r0 utils.Result
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, string) utils.Result); ok {
		r0 = rf(ctx, userId, method, serviceUrl, key)
	} else {
		r0 = ret.Get(0).(utils.Result)
	}

	return r0
}

type mockConstructorTestingTNewDbsQueryUsecase interface {
	mock.TestingT
	Cleanup(func())
}

// NewDbsQueryUsecase creates a new instance of DbsQueryUsecase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewDbsQueryUsecase(t mockConstructorTestingTNewDbsQueryUsecase) *DbsQueryUsecase {
	mock := &DbsQueryUsecase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
