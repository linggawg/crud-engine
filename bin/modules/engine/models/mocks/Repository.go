// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"
	models "engine/bin/modules/engine/models/domain"

	mock "github.com/stretchr/testify/mock"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

// CountData provides a mock function with given fields: ctx, conn, param
func (_m *Repository) CountData(ctx context.Context, conn interface{}, param string) (int64, error) {
	ret := _m.Called(ctx, conn, param)

	var r0 int64
	if rf, ok := ret.Get(0).(func(context.Context, interface{}, string) int64); ok {
		r0 = rf(ctx, conn, param)
	} else {
		r0 = ret.Get(0).(int64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, interface{}, string) error); ok {
		r1 = rf(ctx, conn, param)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteOne provides a mock function with given fields: ctx, conn, query, args
func (_m *Repository) DeleteOne(ctx context.Context, conn interface{}, query string, args []interface{}) error {
	ret := _m.Called(ctx, conn, query, args)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, interface{}, string, []interface{}) error); ok {
		r0 = rf(ctx, conn, query, args)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindData provides a mock function with given fields: ctx, conn, query
func (_m *Repository) FindData(ctx context.Context, conn interface{}, query string) ([]map[string]interface{}, error) {
	ret := _m.Called(ctx, conn, query)

	var r0 []map[string]interface{}
	if rf, ok := ret.Get(0).(func(context.Context, interface{}, string) []map[string]interface{}); ok {
		r0 = rf(ctx, conn, query)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]map[string]interface{})
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, interface{}, string) error); ok {
		r1 = rf(ctx, conn, query)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindPrimaryKey provides a mock function with given fields: ctx, conn, table
func (_m *Repository) FindPrimaryKey(ctx context.Context, conn interface{}, table string) (*models.PrimaryKey, error) {
	ret := _m.Called(ctx, conn, table)

	var r0 *models.PrimaryKey
	if rf, ok := ret.Get(0).(func(context.Context, interface{}, string) *models.PrimaryKey); ok {
		r0 = rf(ctx, conn, table)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.PrimaryKey)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, interface{}, string) error); ok {
		r1 = rf(ctx, conn, table)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InsertOne provides a mock function with given fields: ctx, conn, query, args
func (_m *Repository) InsertOne(ctx context.Context, conn interface{}, query string, args []interface{}) error {
	ret := _m.Called(ctx, conn, query, args)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, interface{}, string, []interface{}) error); ok {
		r0 = rf(ctx, conn, query, args)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SelectInformationSchema provides a mock function with given fields: ctx, conn, table
func (_m *Repository) SelectInformationSchema(ctx context.Context, conn interface{}, table string) ([]models.InformationSchema, error) {
	ret := _m.Called(ctx, conn, table)

	var r0 []models.InformationSchema
	if rf, ok := ret.Get(0).(func(context.Context, interface{}, string) []models.InformationSchema); ok {
		r0 = rf(ctx, conn, table)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.InformationSchema)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, interface{}, string) error); ok {
		r1 = rf(ctx, conn, table)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateOne provides a mock function with given fields: ctx, conn, query, args
func (_m *Repository) UpdateOne(ctx context.Context, conn interface{}, query string, args []interface{}) error {
	ret := _m.Called(ctx, conn, query, args)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, interface{}, string, []interface{}) error); ok {
		r0 = rf(ctx, conn, query, args)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewRepository creates a new instance of Repository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewRepository(t mockConstructorTestingTNewRepository) *Repository {
	mock := &Repository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
