// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"
	domain "engine/bin/modules/engine/models/domain"

	mock "github.com/stretchr/testify/mock"

	utils "engine/bin/pkg/utils"
)

// EngineQueryUsecase is an autogenerated mock type for the QueryUsecase type
type EngineQueryUsecase struct {
	mock.Mock
}

// Get provides a mock function with given fields: ctx, dbs, table, payload
func (_m *EngineQueryUsecase) Get(ctx context.Context, engineConfig domain.EngineConfig, table string, payload *domain.GetList) utils.Result {
	ret := _m.Called(ctx, engineConfig, table, payload)

	var r0 utils.Result
	if rf, ok := ret.Get(0).(func(context.Context, domain.EngineConfig, string, *domain.GetList) utils.Result); ok {
		r0 = rf(ctx, engineConfig, table, payload)
	} else {
		r0 = ret.Get(0).(utils.Result)
	}

	return r0
}

type mockConstructorTestingTNewEngineQueryUsecase interface {
	mock.TestingT
	Cleanup(func())
}

// NewEngineQueryUsecase creates a new instance of EngineQueryUsecase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewEngineQueryUsecase(t mockConstructorTestingTNewEngineQueryUsecase) *EngineQueryUsecase {
	mock := &EngineQueryUsecase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
