// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"
	domain "engine/bin/modules/engine/models/domain"

	mock "github.com/stretchr/testify/mock"

	sqlx "github.com/jmoiron/sqlx"

	utils "engine/bin/pkg/utils"
)

// EngineCommandUsecase is an autogenerated mock type for the CommandUsecase type
type EngineCommandUsecase struct {
	mock.Mock
}

// Delete provides a mock function with given fields: ctx, dbs, payload
func (_m *EngineCommandUsecase) Delete(ctx context.Context, engineConfig domain.EngineConfig, payload *domain.EngineRequest) utils.Result {
	ret := _m.Called(ctx, engineConfig, payload)

	var r0 utils.Result
	if rf, ok := ret.Get(0).(func(context.Context, domain.EngineConfig, *domain.EngineRequest) utils.Result); ok {
		r0 = rf(ctx, engineConfig, payload)
	} else {
		r0 = ret.Get(0).(utils.Result)
	}

	return r0
}

// Insert provides a mock function with given fields: ctx, dbs, payload
func (_m *EngineCommandUsecase) Insert(ctx context.Context, engineConfig domain.EngineConfig, payload *domain.EngineRequest) utils.Result {
	ret := _m.Called(ctx, engineConfig, payload)

	var r0 utils.Result
	if rf, ok := ret.Get(0).(func(context.Context, domain.EngineConfig, *domain.EngineRequest) utils.Result); ok {
		r0 = rf(ctx, engineConfig, payload)
	} else {
		r0 = ret.Get(0).(utils.Result)
	}

	return r0
}

// Patch provides a mock function with given fields: ctx, dbs, payload
func (_m *EngineCommandUsecase) Patch(ctx context.Context, engineConfig domain.EngineConfig, payload *domain.EngineRequest) utils.Result {
	ret := _m.Called(ctx, engineConfig, payload)

	var r0 utils.Result
	if rf, ok := ret.Get(0).(func(context.Context, domain.EngineConfig, *domain.EngineRequest) utils.Result); ok {
		r0 = rf(ctx, engineConfig, payload)
	} else {
		r0 = ret.Get(0).(utils.Result)
	}

	return r0
}

// SetupDataset provides a mock function with given fields: ctx, dialect, db
func (_m *EngineCommandUsecase) SetupDataset(ctx context.Context, dialect string, db *sqlx.DB) utils.Result {
	ret := _m.Called(ctx, dialect, db)

	var r0 utils.Result
	if rf, ok := ret.Get(0).(func(context.Context, string, *sqlx.DB) utils.Result); ok {
		r0 = rf(ctx, dialect, db)
	} else {
		r0 = ret.Get(0).(utils.Result)
	}

	return r0
}

// Update provides a mock function with given fields: ctx, dbs, payload
func (_m *EngineCommandUsecase) Update(ctx context.Context, engineConfig domain.EngineConfig, payload *domain.EngineRequest) utils.Result {
	ret := _m.Called(ctx, engineConfig, payload)

	var r0 utils.Result
	if rf, ok := ret.Get(0).(func(context.Context, domain.EngineConfig, *domain.EngineRequest) utils.Result); ok {
		r0 = rf(ctx, engineConfig, payload)
	} else {
		r0 = ret.Get(0).(utils.Result)
	}

	return r0
}

type mockConstructorTestingTNewEngineCommandUsecase interface {
	mock.TestingT
	Cleanup(func())
}

// NewEngineCommandUsecase creates a new instance of EngineCommandUsecase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewEngineCommandUsecase(t mockConstructorTestingTNewEngineCommandUsecase) *EngineCommandUsecase {
	mock := &EngineCommandUsecase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
