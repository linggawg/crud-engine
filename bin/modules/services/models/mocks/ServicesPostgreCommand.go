// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"
	models "engine/bin/modules/services/models/domain"

	mock "github.com/stretchr/testify/mock"
)

// ServicesPostgreCommand is an autogenerated mock type for the ServicesPostgre type
type ServicesPostgreCommand struct {
	mock.Mock
}

// DeleteByServiceUrl provides a mock function with given fields: ctx, serviceUrl
func (_m *ServicesPostgreCommand) DeleteByServiceUrl(ctx context.Context, serviceUrl string) error {
	ret := _m.Called(ctx, serviceUrl)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, serviceUrl)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// InsertOne provides a mock function with given fields: ctx, services
func (_m *ServicesPostgreCommand) InsertOne(ctx context.Context, services *models.Services) error {
	ret := _m.Called(ctx, services)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.Services) error); ok {
		r0 = rf(ctx, services)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewServicesPostgreCommand interface {
	mock.TestingT
	Cleanup(func())
}

// NewServicesPostgreCommand creates a new instance of ServicesPostgreCommand. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewServicesPostgreCommand(t mockConstructorTestingTNewServicesPostgreCommand) *ServicesPostgreCommand {
	mock := &ServicesPostgreCommand{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
