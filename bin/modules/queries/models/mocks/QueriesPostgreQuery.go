// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"
	models "engine/bin/modules/queries/models/domain"

	mock "github.com/stretchr/testify/mock"
)

// QueriesPostgreQuery is an autogenerated mock type for the QueriesPostgre type
type QueriesPostgreQuery struct {
	mock.Mock
}

// FindOneByKey provides a mock function with given fields: ctx, key
func (_m *QueriesPostgreQuery) FindOneByKey(ctx context.Context, key string) (*models.Queries, error) {
	ret := _m.Called(ctx, key)

	var r0 *models.Queries
	if rf, ok := ret.Get(0).(func(context.Context, string) *models.Queries); ok {
		r0 = rf(ctx, key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Queries)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewQueriesPostgreQuery interface {
	mock.TestingT
	Cleanup(func())
}

// NewQueriesPostgreQuery creates a new instance of QueriesPostgreQuery. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewQueriesPostgreQuery(t mockConstructorTestingTNewQueriesPostgreQuery) *QueriesPostgreQuery {
	mock := &QueriesPostgreQuery{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
