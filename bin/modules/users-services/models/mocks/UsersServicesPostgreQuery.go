// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"
	models "engine/bin/modules/users-services/models/domain"

	mock "github.com/stretchr/testify/mock"
)

// UsersServicesPostgreQuery is an autogenerated mock type for the UsersServicesPostgre type
type UsersServicesPostgreQuery struct {
	mock.Mock
}

// FindOneByServiceIDAndUserId provides a mock function with given fields: ctx, serviceId, userId
func (_m *UsersServicesPostgreQuery) FindOneByServiceIDAndUserId(ctx context.Context, serviceId string, userId string) (*models.UsersServices, error) {
	ret := _m.Called(ctx, serviceId, userId)

	var r0 *models.UsersServices
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *models.UsersServices); ok {
		r0 = rf(ctx, serviceId, userId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.UsersServices)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, serviceId, userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindOneByServiceUrlAndUserIdAndMethodAndQueryIsNull provides a mock function with given fields: ctx, serviceUrl, userId, method
func (_m *UsersServicesPostgreQuery) FindOneByServiceUrlAndUserIdAndMethodAndQueryIsNull(ctx context.Context, serviceUrl string, userId string, method string) (*models.UsersServices, error) {
	ret := _m.Called(ctx, serviceUrl, userId, method)

	var r0 *models.UsersServices
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) *models.UsersServices); ok {
		r0 = rf(ctx, serviceUrl, userId, method)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.UsersServices)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, string) error); ok {
		r1 = rf(ctx, serviceUrl, userId, method)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewUsersServicesPostgreQuery interface {
	mock.TestingT
	Cleanup(func())
}

// NewUsersServicesPostgreQuery creates a new instance of UsersServicesPostgreQuery. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewUsersServicesPostgreQuery(t mockConstructorTestingTNewUsersServicesPostgreQuery) *UsersServicesPostgreQuery {
	mock := &UsersServicesPostgreQuery{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
